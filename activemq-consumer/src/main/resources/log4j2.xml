<?xml version="1.0" encoding="UTF-8"?>

<!--

1. 根节点configuration，然后有两个子节点：appenders和loggers（都是复数，意思就是可以定义很多个appender和logger了）
（如果想详细的看一下这个xml的结构，可以去jar包下面去找xsd文件和dtd文件）
2. appenders：这个下面定义的是各个appender，就是输出了，有好多类别，这里也不多说（容易造成理解和解释上的压力，一开始也未必能听懂，等于白讲），
先看这个例子，只有一个Console，这些节点可不是随便命名的，Console就是输出控制台的意思。
然后就针对这个输出设置一些属性，这里设置了PatternLayout就是输出格式了，
基本上是前面时间，线程，级别，logger名称，log信息等，差不多，可以自己去查他们的语法规则。
3. loggers下面会定义许多个logger，这些logger通过name进行区分，来对不同的logger配置不同的输出，
方法是通过引用上面定义的logger，注意，appender-ref引用的值是上面每个appender的name，而不是节点名称。

我们现在要调用logger的方法，不过在这个Logger对象中，有很多方法，所以要先了解log4j的日志级别，
log4j规定了默认的几个级别：trace<debug<info<warn<error<fatal等。这里要说明一下：
1. 级别之间是包含的关系，意思是如果你设置日志级别是trace，则大于等于这个级别的日志都会输出。
2. 基本上默认的级别没多大区别，就是一个默认的设定。你可以通过它的API自己定义级别。
   你也可以随意调用这些方法，不过你要在配置文件里面好好处理了，否则就起不到日志的作用了，
   而且也不易读，相当于一个规范，你要完全定义一套也可以，不用没多大必要。
3. 这不同的级别的含义大家都很容易理解，这里就简单介绍一下：
trace : 是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，
        我们可以设置最低日志级别不让他输出。
debug : 调试么，我一般就只用这个作为最低级别，trace压根不用。是在没办法就用eclipse或者idea的debug功能就好了么。
info  : 输出一下你感兴趣的或者重要的信息，这个用的最多了。
warn  : 有些信息不是错误信息，但是也要给程序员的一些提示，类似于eclipse中代码的验证不是有error 和warn（不算错误但是也请注意，比如以下depressed的方法）。
error : 错误信息。用的也比较多。
fatal : 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。
-->
<!--
    monitorInterval : 自动监控该配置文件是否有变化,如果变化,则自动根据文件内容重新配置
    这里每一小时监控一次
-->
<Configuration monitorInterval="3600" shutdownHook="disable">

    <properties>
        <property name="LOG_HOME">${sys:catalina.home}</property>
        <!-- 日志切割的最小单位 -->
        <property name="LOG_FILE_SIZE">100M</property>
        <!-- 日志备份目录 -->
        <property name="SERVER_NAME">activemq-consumer</property>
        <property name="OUTPUT_LOG_LEVEL">DEBUG</property><!-- 日志输出级别 -->
    </properties>

    <Appenders>
        <!-- 定义控制台输出 -->
        <Console name="Console" target="SYSTEM_OUT" follow="true">
            <!-- 输出日志的格式 -->
            <PatternLayout pattern="%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c.%M(%L) | %m%n"/>
        </Console>

        <!--
            定义后台文档日志记录
            这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档
        -->
        <RollingFile name="RollingFile"
                     fileName="${LOG_HOME}/applogs/${SERVER_NAME}.app.log"
                     filePattern="${LOG_HOME}/applogs/${SERVER_NAME}.$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c.%M(%L) | %m%n</Pattern>
            </PatternLayout>

            <Policies>
                <!-- 定义log文件封存的周期 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE}"/>
            </Policies>
            <!-- 最多备份10个 -->
            <DefaultRolloverStrategy fileIndex="max" max="20"/>
        </RollingFile>


        <!-- 只显示error级别的信息 -->
        <RollingFile name="RollingFileError"
                     fileName="${LOG_HOME}/applogs/${SERVER_NAME}.app.error.log"
                     filePattern="${LOG_HOME}/applogs/${SERVER_NAME}.$${date:yyyy-MM}/app.error-%d{MM-dd-yyyy}-%i.log">
            <PatternLayout>
                <Pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c.%M(%L) | %m%n</Pattern>
            </PatternLayout>

            <Policies>
                <!-- 定义log文件封存的周期 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="${LOG_FILE_SIZE}"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max" max="20"/>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
        </RollingFile>

    </Appenders>

    <Loggers>

        <!-- mybatis log configure -->
        <logger name="org.mybatis.spring" level="DEBUG"/>
        <logger name="org.mybatis.spring.SqlSessionFactoryBean" level="DEBUG"/>
        <logger name="java.sql.Connection" level="DEBUG"/>
        <logger name="java.sql.Statement" level="DEBUG"/>
        <logger name="java.sql.PreparedStatement" level="DEBUG"/>

        <logger name="druid.sql" level="DEBUG"/>
        <logger name="org.mybatis.spring" level="DEBUG"/>
        <logger name="org.springframework" level="info"/>

        <!-- 业务debug日志 -->
        <logger name="com.aidijing" level="DEBUG"/>

        <!-- 定义除单个类外所有日志记录级别 -->
        <Root level="debug">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="RollingFile"/>
        </Root>
    </Loggers>

</Configuration>














